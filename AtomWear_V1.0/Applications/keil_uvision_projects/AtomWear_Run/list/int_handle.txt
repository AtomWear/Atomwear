; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\int_handle.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\int_handle.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\int_handle.crf ..\..\..\Software\Source\INT_handle\INT_handle.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;566     */
;;;567    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;568    {
;;;569      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L1.58|
;;;570        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
000006  4ab1              LDR      r2,|L1.716|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4ba8              LDR      r3,|L1.716|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L1.108|
                  |L1.58|
;;;571            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;572      else {
;;;573        NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4aa5              LDR      r2,|L1.720|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b9c              LDR      r3,|L1.720|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L1.108|
;;;574            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;575    }
00006c  bd10              POP      {r4,pc}
;;;576    
                          ENDP

                  set_led_flicker PROC
;;;29     
;;;30     void set_led_flicker(uint8_t counter)
00006e  4999              LDR      r1,|L1.724|
;;;31     {
;;;32         flicker_counter = counter;
000070  7008              STRB     r0,[r1,#0]
;;;33     }
000072  4770              BX       lr
;;;34     
                          ENDP

                  GPIOTE_IRQHandler PROC
;;;36      
;;;37     void GPIOTE_IRQHandler()
000074  b510              PUSH     {r4,lr}
;;;38     {
;;;39         if((NRF_GPIOTE->EVENTS_IN[0] == 1) && (NRF_GPIOTE->INTENSET & GPIOTE_INTENSET_IN0_Msk) )  
000076  4898              LDR      r0,|L1.728|
000078  6800              LDR      r0,[r0,#0]
00007a  2801              CMP      r0,#1
00007c  d12b              BNE      |L1.214|
00007e  4897              LDR      r0,|L1.732|
000080  6840              LDR      r0,[r0,#4]
000082  07c0              LSLS     r0,r0,#31
000084  0fc0              LSRS     r0,r0,#31
000086  d026              BEQ      |L1.214|
;;;40         {
;;;41             NRF_GPIOTE->EVENTS_IN[0] = 0;
000088  2000              MOVS     r0,#0
00008a  4993              LDR      r1,|L1.728|
00008c  6008              STR      r0,[r1,#0]
;;;42             //NRF_GPIOTE->INTENSET  = GPIOTE_INTENSET_IN0_Disabled << GPIOTE_INTENSET_IN0_Pos;
;;;43             
;;;44                 switch(get_work_mode())
00008e  f7fffffe          BL       get_work_mode
000092  2801              CMP      r0,#1
000094  d004              BEQ      |L1.160|
000096  2802              CMP      r0,#2
000098  d00f              BEQ      |L1.186|
00009a  2803              CMP      r0,#3
00009c  d11a              BNE      |L1.212|
00009e  e011              B        |L1.196|
                  |L1.160|
;;;45                 {
;;;46                     // tap cyclical
;;;47                 case SYSTEM_PEDOMETER_MODE :
;;;48                     if(get_pedo_slice_handle_state() == true)
0000a0  f7fffffe          BL       get_pedo_slice_handle_state
0000a4  2800              CMP      r0,#0
0000a6  d001              BEQ      |L1.172|
;;;49                         pedo_data_end_handle();
0000a8  f7fffffe          BL       pedo_data_end_handle
                  |L1.172|
;;;50                     
;;;51                     clear_sleep_countdown();
0000ac  f7fffffe          BL       clear_sleep_countdown
;;;52                     work_mode_switch();
0000b0  f7fffffe          BL       work_mode_switch
;;;53                     work_switch_set();                
0000b4  f7fffffe          BL       work_switch_set
;;;54                     break;
0000b8  e00c              B        |L1.212|
                  |L1.186|
;;;55                     //
;;;56                 case SYSTEM_USER_SLEEP_MODE:
;;;57                     work_mode_switch();
0000ba  f7fffffe          BL       work_mode_switch
;;;58                     work_switch_set();  
0000be  f7fffffe          BL       work_switch_set
;;;59                     break;
0000c2  e007              B        |L1.212|
                  |L1.196|
;;;60     
;;;61                 case SYSTEM_BLE_WORK_MODE:
;;;62                     if(BL.E.CONNECT_STATE == false)          // ble is not paired with phone
0000c4  4886              LDR      r0,|L1.736|
0000c6  7800              LDRB     r0,[r0,#0]  ; BL
0000c8  0780              LSLS     r0,r0,#30
0000ca  0fc0              LSRS     r0,r0,#31
0000cc  d101              BNE      |L1.210|
;;;63                     {
;;;64                         ble_close();
0000ce  f7fffffe          BL       ble_close
                  |L1.210|
;;;65                     }
;;;66                     break;
0000d2  bf00              NOP      
                  |L1.212|
0000d4  bf00              NOP                            ;54
                  |L1.214|
;;;67                 }
;;;68        
;;;69         }
;;;70     
;;;71         // Event causing the interrupt must be cleared.
;;;72         if((NRF_GPIOTE->EVENTS_IN[1] == 1) && (NRF_GPIOTE->INTENSET & GPIOTE_INTENSET_IN1_Msk)  )  
0000d6  4880              LDR      r0,|L1.728|
0000d8  6840              LDR      r0,[r0,#4]
0000da  2801              CMP      r0,#1
0000dc  d10a              BNE      |L1.244|
0000de  487f              LDR      r0,|L1.732|
0000e0  6840              LDR      r0,[r0,#4]
0000e2  2102              MOVS     r1,#2
0000e4  4208              TST      r0,r1
0000e6  d005              BEQ      |L1.244|
;;;73         {
;;;74             NRF_GPIOTE->EVENTS_IN[1] = 0;
0000e8  2100              MOVS     r1,#0
0000ea  487b              LDR      r0,|L1.728|
0000ec  6041              STR      r1,[r0,#4]
;;;75             xprintf("GPIO INT.\r\n");
0000ee  a07d              ADR      r0,|L1.740|
0000f0  f7fffffe          BL       xprintf
                  |L1.244|
;;;76         }
;;;77     
;;;78     }
0000f4  bd10              POP      {r4,pc}
;;;79     
                          ENDP

                  system_local_timing PROC
;;;208    
;;;209    void system_local_timing()
0000f6  b510              PUSH     {r4,lr}
;;;210    {
;;;211        if(system_local_click == 100)
0000f8  487d              LDR      r0,|L1.752|
0000fa  7800              LDRB     r0,[r0,#0]  ; system_local_click
0000fc  2864              CMP      r0,#0x64
0000fe  d10c              BNE      |L1.282|
;;;212        {
;;;213            xprintf("the time is :%d\r\n ", get_system_time());
000100  f7fffffe          BL       get_system_time
000104  4604              MOV      r4,r0
000106  4621              MOV      r1,r4
000108  a07a              ADR      r0,|L1.756|
00010a  f7fffffe          BL       xprintf
;;;214            system_local_click = 0;
00010e  2000              MOVS     r0,#0
000110  4977              LDR      r1,|L1.752|
000112  7008              STRB     r0,[r1,#0]
;;;215            //if(BL.E.OPEN_STATE == true)
;;;216            system_time_update();
000114  f7fffffe          BL       system_time_update
000118  e004              B        |L1.292|
                  |L1.282|
;;;217        }
;;;218        else
;;;219            system_local_click++;
00011a  4875              LDR      r0,|L1.752|
00011c  7800              LDRB     r0,[r0,#0]  ; system_local_click
00011e  1c40              ADDS     r0,r0,#1
000120  4973              LDR      r1,|L1.752|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;220    }
000124  bd10              POP      {r4,pc}
;;;221    
                          ENDP

                  led_flicker PROC
;;;187    
;;;188    void led_flicker()
000126  486b              LDR      r0,|L1.724|
;;;189    {
;;;190        if(flicker_counter != 0)
000128  7800              LDRB     r0,[r0,#0]  ; flicker_counter
00012a  2800              CMP      r0,#0
00012c  d021              BEQ      |L1.370|
;;;191        {
;;;192            flicker_cycle++;
00012e  4876              LDR      r0,|L1.776|
000130  7800              LDRB     r0,[r0,#0]  ; flicker_cycle
000132  1c40              ADDS     r0,r0,#1
000134  4974              LDR      r1,|L1.776|
000136  7008              STRB     r0,[r1,#0]
;;;193            if( flicker_cycle == 31)
000138  4608              MOV      r0,r1
00013a  7800              LDRB     r0,[r0,#0]  ; flicker_cycle
00013c  281f              CMP      r0,#0x1f
00013e  d106              BNE      |L1.334|
;;;194            {
;;;195                nrf_gpio_pin_set(GREEN_LED);
000140  2011              MOVS     r0,#0x11
000142  2101              MOVS     r1,#1
000144  4081              LSLS     r1,r1,r0
000146  4a71              LDR      r2,|L1.780|
000148  6091              STR      r1,[r2,#8]
00014a  bf00              NOP      
00014c  bf00              NOP      
                  |L1.334|
;;;196            }
;;;197            if( flicker_cycle == 51)
00014e  486e              LDR      r0,|L1.776|
000150  7800              LDRB     r0,[r0,#0]  ; flicker_cycle
000152  2833              CMP      r0,#0x33
000154  d10d              BNE      |L1.370|
;;;198            {
;;;199                nrf_gpio_pin_clear(GREEN_LED);
000156  2011              MOVS     r0,#0x11
000158  2101              MOVS     r1,#1
00015a  4081              LSLS     r1,r1,r0
00015c  4a6b              LDR      r2,|L1.780|
00015e  60d1              STR      r1,[r2,#0xc]
000160  bf00              NOP      
;;;200                flicker_cycle = 0;
000162  2000              MOVS     r0,#0
000164  4968              LDR      r1,|L1.776|
000166  7008              STRB     r0,[r1,#0]
;;;201                flicker_counter --;
000168  485a              LDR      r0,|L1.724|
00016a  7800              LDRB     r0,[r0,#0]  ; flicker_counter
00016c  1e40              SUBS     r0,r0,#1
00016e  4959              LDR      r1,|L1.724|
000170  7008              STRB     r0,[r1,#0]
                  |L1.370|
;;;202            }
;;;203    
;;;204        }
;;;205    
;;;206    }
000172  4770              BX       lr
;;;207    
                          ENDP

                  system_idle_operate PROC
;;;223    
;;;224    void system_idle_operate()
000174  b510              PUSH     {r4,lr}
;;;225    {
;;;226        led_flicker();
000176  f7fffffe          BL       led_flicker
;;;227        system_local_timing();
00017a  f7fffffe          BL       system_local_timing
;;;228    }
00017e  bd10              POP      {r4,pc}
                          ENDP

                  TIMER1_IRQHandler PROC
;;;81     
;;;82     void TIMER1_IRQHandler()
000180  b510              PUSH     {r4,lr}
;;;83     {
;;;84         if((NRF_TIMER1->EVENTS_COMPARE[0] == 1) && (NRF_TIMER1->INTENSET & TIMER_INTENSET_COMPARE0_Msk))
000182  4863              LDR      r0,|L1.784|
000184  6800              LDR      r0,[r0,#0]
000186  2801              CMP      r0,#1
000188  d147              BNE      |L1.538|
00018a  4862              LDR      r0,|L1.788|
00018c  6840              LDR      r0,[r0,#4]
00018e  2101              MOVS     r1,#1
000190  0409              LSLS     r1,r1,#16
000192  4208              TST      r0,r1
000194  d041              BEQ      |L1.538|
;;;85         {
;;;86             NRF_TIMER1->EVENTS_COMPARE[0] = 0;
000196  2000              MOVS     r0,#0
000198  495d              LDR      r1,|L1.784|
00019a  6008              STR      r0,[r1,#0]
;;;87             NRF_TIMER1->TASKS_CLEAR = 1;
00019c  2001              MOVS     r0,#1
00019e  495e              LDR      r1,|L1.792|
0001a0  60c8              STR      r0,[r1,#0xc]
;;;88             if(get_work_switch_state())  
0001a2  f7fffffe          BL       get_work_switch_state
0001a6  2800              CMP      r0,#0
0001a8  d01d              BEQ      |L1.486|
;;;89             {
;;;90                 work_switch_clear();
0001aa  f7fffffe          BL       work_switch_clear
;;;91                 
;;;92                 switch(get_work_mode())
0001ae  f7fffffe          BL       get_work_mode
0001b2  2801              CMP      r0,#1
0001b4  d004              BEQ      |L1.448|
0001b6  2802              CMP      r0,#2
0001b8  d008              BEQ      |L1.460|
0001ba  2803              CMP      r0,#3
0001bc  d112              BNE      |L1.484|
0001be  e00b              B        |L1.472|
                  |L1.448|
;;;93                 {
;;;94                 case SYSTEM_PEDOMETER_MODE:
;;;95                     system_default_work_mode_init();
0001c0  f7fffffe          BL       system_default_work_mode_init
;;;96                     set_led_flicker(2);
0001c4  2002              MOVS     r0,#2
0001c6  f7fffffe          BL       set_led_flicker
;;;97                     break;
0001ca  e00b              B        |L1.484|
                  |L1.460|
;;;98     
;;;99                 case SYSTEM_USER_SLEEP_MODE :
;;;100                    system_user_sleep_mode_init();
0001cc  f7fffffe          BL       system_user_sleep_mode_init
;;;101                    set_led_flicker(3);
0001d0  2003              MOVS     r0,#3
0001d2  f7fffffe          BL       set_led_flicker
;;;102                    break;
0001d6  e005              B        |L1.484|
                  |L1.472|
;;;103    
;;;104                case SYSTEM_BLE_WORK_MODE :
;;;105                    system_ble_work_mode_init();
0001d8  f7fffffe          BL       system_ble_work_mode_init
;;;106                    set_led_flicker(4);
0001dc  2004              MOVS     r0,#4
0001de  f7fffffe          BL       set_led_flicker
;;;107                    break;
0001e2  bf00              NOP      
                  |L1.484|
0001e4  e019              B        |L1.538|
                  |L1.486|
;;;108    
;;;109                }
;;;110            }
;;;111            else     
;;;112            {
;;;113                switch(get_work_mode())
0001e6  f7fffffe          BL       get_work_mode
0001ea  2801              CMP      r0,#1
0001ec  d006              BEQ      |L1.508|
0001ee  2802              CMP      r0,#2
0001f0  d007              BEQ      |L1.514|
0001f2  2803              CMP      r0,#3
0001f4  d008              BEQ      |L1.520|
0001f6  2804              CMP      r0,#4
0001f8  d10c              BNE      |L1.532|
0001fa  e008              B        |L1.526|
                  |L1.508|
;;;114                {
;;;115                case SYSTEM_PEDOMETER_MODE:
;;;116                    system_default_work_mode_operate();
0001fc  f7fffffe          BL       system_default_work_mode_operate
;;;117    
;;;118                    break;
000200  e008              B        |L1.532|
                  |L1.514|
;;;119    
;;;120                case SYSTEM_USER_SLEEP_MODE :
;;;121                    system_user_sleep_mode_operate();
000202  f7fffffe          BL       system_user_sleep_mode_operate
;;;122                    break;
000206  e005              B        |L1.532|
                  |L1.520|
;;;123    
;;;124                case SYSTEM_BLE_WORK_MODE :
;;;125                    system_ble_work_mode_operate();
000208  f7fffffe          BL       system_ble_work_mode_operate
;;;126                    break;
00020c  e002              B        |L1.532|
                  |L1.526|
;;;127    
;;;128                case SYSTEM_MCU_SLEEP_MODE :
;;;129                    system_mcu_sleep_mode_operate();
00020e  f7fffffe          BL       system_mcu_sleep_mode_operate
;;;130                    break;
000212  bf00              NOP      
                  |L1.532|
000214  bf00              NOP                            ;118
;;;131    
;;;132                }
;;;133                system_idle_operate();
000216  f7fffffe          BL       system_idle_operate
                  |L1.538|
;;;134            }
;;;135    
;;;136        }
;;;137    }
00021a  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  TIMER1_OPEN PROC
;;;139    
;;;140    void TIMER1_OPEN()
00021c  b510              PUSH     {r4,lr}
;;;141    {
;;;142        NRF_TIMER1->MODE           = TIMER_MODE_MODE_Timer;        // Set the timer in Timer Mode.
00021e  2000              MOVS     r0,#0
000220  493e              LDR      r1,|L1.796|
000222  6048              STR      r0,[r1,#4]
;;;143        NRF_TIMER1->PRESCALER      = 4;                            // Prescaler 4, =>1 tick = 1 us.
000224  2004              MOVS     r0,#4
000226  6108              STR      r0,[r1,#0x10]
;;;144        NRF_TIMER1->BITMODE        = TIMER_BITMODE_BITMODE_32Bit;  // 16 bit mode.
000228  2003              MOVS     r0,#3
00022a  6088              STR      r0,[r1,#8]
;;;145        /* Bit 16 : Enable interrupt on COMPARE[0] */
;;;146        NVIC_SetPriority(TIMER1_IRQn, APP_IRQ_PRIORITY_LOW);
00022c  2103              MOVS     r1,#3
00022e  2009              MOVS     r0,#9
000230  f7fffffe          BL       NVIC_SetPriority
;;;147        NVIC_EnableIRQ(TIMER1_IRQn);
000234  2009              MOVS     r0,#9
000236  f7fffffe          BL       NVIC_EnableIRQ
;;;148    
;;;149        NRF_TIMER1->TASKS_CLEAR    = 1;                            // clear the task first to be usable for later.
00023a  2001              MOVS     r0,#1
00023c  4936              LDR      r1,|L1.792|
00023e  60c8              STR      r0,[r1,#0xc]
;;;150        NRF_TIMER1->CC[0]          =  10000;   // 10ms/1us =10000
000240  4837              LDR      r0,|L1.800|
000242  4936              LDR      r1,|L1.796|
000244  3140              ADDS     r1,r1,#0x40
000246  6008              STR      r0,[r1,#0]
;;;151        NRF_TIMER1->INTENSET = TIMER_INTENSET_COMPARE0_Enabled << TIMER_INTENSET_COMPARE0_Pos;
000248  2001              MOVS     r0,#1
00024a  0400              LSLS     r0,r0,#16
00024c  4931              LDR      r1,|L1.788|
00024e  6048              STR      r0,[r1,#4]
;;;152        NRF_TIMER1->TASKS_START    = 1;
000250  2001              MOVS     r0,#1
000252  4931              LDR      r1,|L1.792|
000254  6008              STR      r0,[r1,#0]
;;;153    
;;;154    }
000256  bd10              POP      {r4,pc}
;;;155    
                          ENDP

                  TIMER1_INT_CLOSE PROC
;;;156    void TIMER1_INT_CLOSE()
000258  2009              MOVS     r0,#9
00025a  2101              MOVS     r1,#1
00025c  4081              LSLS     r1,r1,r0
00025e  4a1c              LDR      r2,|L1.720|
000260  3280              ADDS     r2,r2,#0x80
000262  6011              STR      r1,[r2,#0]
000264  bf00              NOP      
;;;157    {
;;;158        NVIC_DisableIRQ(TIMER1_IRQn);
;;;159        NRF_TIMER1->INTENSET = TIMER_INTENSET_COMPARE0_Disabled << TIMER_INTENSET_COMPARE0_Pos;
000266  2000              MOVS     r0,#0
000268  492a              LDR      r1,|L1.788|
00026a  6048              STR      r0,[r1,#4]
;;;160    }
00026c  4770              BX       lr
;;;161    
                          ENDP

                  TIMER1_INT_OPEN PROC
;;;162    void TIMER1_INT_OPEN()
00026e  b510              PUSH     {r4,lr}
;;;163    {
;;;164        NVIC_EnableIRQ(TIMER1_IRQn);
000270  2009              MOVS     r0,#9
000272  f7fffffe          BL       NVIC_EnableIRQ
;;;165        NRF_TIMER1->INTENSET = TIMER_INTENSET_COMPARE0_Enabled << TIMER_INTENSET_COMPARE0_Pos;
000276  2001              MOVS     r0,#1
000278  0400              LSLS     r0,r0,#16
00027a  4926              LDR      r1,|L1.788|
00027c  6048              STR      r0,[r1,#4]
;;;166    }
00027e  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  GPIO_LoToHi_INT_config PROC
;;;169     
;;;170    void GPIO_LoToHi_INT_config(uint32_t pin)
000280  b510              PUSH     {r4,lr}
;;;171    {
000282  4604              MOV      r4,r0
;;;172        nrf_gpio_cfg_input(pin, NRF_GPIO_PIN_PULLDOWN);
000284  2001              MOVS     r0,#1
000286  0081              LSLS     r1,r0,#2
000288  2205              MOVS     r2,#5
00028a  0712              LSLS     r2,r2,#28
00028c  2307              MOVS     r3,#7
00028e  021b              LSLS     r3,r3,#8
000290  18d2              ADDS     r2,r2,r3
000292  00a3              LSLS     r3,r4,#2
000294  50d1              STR      r1,[r2,r3]
000296  bf00              NOP      
;;;173        // Enable interrupt:
;;;174        NVIC_SetPriority(GPIOTE_IRQn, APP_IRQ_PRIORITY_LOW);
000298  2103              MOVS     r1,#3
00029a  2006              MOVS     r0,#6
00029c  f7fffffe          BL       NVIC_SetPriority
;;;175        NVIC_EnableIRQ(GPIOTE_IRQn);
0002a0  2006              MOVS     r0,#6
0002a2  f7fffffe          BL       NVIC_EnableIRQ
;;;176        //sd_nvic_EnableIRQ(GPIOTE_IRQn);
;;;177        
;;;178        NRF_GPIOTE->CONFIG[0] =  (GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos)
0002a6  0220              LSLS     r0,r4,#8
0002a8  2101              MOVS     r1,#1
0002aa  0409              LSLS     r1,r1,#16
0002ac  4308              ORRS     r0,r0,r1
0002ae  1c40              ADDS     r0,r0,#1
0002b0  491c              LDR      r1,|L1.804|
0002b2  6108              STR      r0,[r1,#0x10]
;;;179                                 | (pin << GPIOTE_CONFIG_PSEL_Pos)
;;;180                                 | (GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos);
;;;181        
;;;182        NRF_GPIOTE->INTENSET  = GPIOTE_INTENSET_IN0_Set << GPIOTE_INTENSET_IN0_Pos;
0002b4  2001              MOVS     r0,#1
0002b6  4909              LDR      r1,|L1.732|
0002b8  6048              STR      r0,[r1,#4]
;;;183    }
0002ba  bd10              POP      {r4,pc}
;;;184    
                          ENDP

                  NVIC_EnableIRQ PROC
;;;499     */
;;;500    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
0002bc  06c2              LSLS     r2,r0,#27
;;;501    {
;;;502      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
0002be  0ed2              LSRS     r2,r2,#27
0002c0  2101              MOVS     r1,#1
0002c2  4091              LSLS     r1,r1,r2
0002c4  4a02              LDR      r2,|L1.720|
0002c6  6011              STR      r1,[r2,#0]
;;;503    }
0002c8  4770              BX       lr
;;;504    
                          ENDP

0002ca  0000              DCW      0x0000
                  |L1.716|
                          DCD      0xe000ed1c
                  |L1.720|
                          DCD      0xe000e100
                  |L1.724|
                          DCD      flicker_counter
                  |L1.728|
                          DCD      0x40006100
                  |L1.732|
                          DCD      0x40006300
                  |L1.736|
                          DCD      ||BL||
                  |L1.740|
0002e4  4750494f          DCB      "GPIO INT.\r\n",0
0002e8  20494e54
0002ec  2e0d0a00
                  |L1.752|
                          DCD      system_local_click
                  |L1.756|
0002f4  74686520          DCB      "the time is :%d\r\n ",0
0002f8  74696d65
0002fc  20697320
000300  3a25640d
000304  0a2000  
000307  00                DCB      0
                  |L1.776|
                          DCD      flicker_cycle
                  |L1.780|
                          DCD      0x50000500
                  |L1.784|
                          DCD      0x40009140
                  |L1.788|
                          DCD      0x40009300
                  |L1.792|
                          DCD      0x40009000
                  |L1.796|
                          DCD      0x40009500
                  |L1.800|
                          DCD      0x00002710
                  |L1.804|
                          DCD      0x40006500

                          AREA ||.data||, DATA, ALIGN=0

                  flicker_counter
000000  00                DCB      0x00
                  flicker_cycle
000001  00                DCB      0x00
                  system_local_click
000002  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\INT_handle\\INT_handle.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_INT_handle_c_faa0053c____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_INT_handle_c_faa0053c____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_INT_handle_c_faa0053c____REVSH|
#line 130
|__asm___12_INT_handle_c_faa0053c____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_INT_handle_c_faa0053c__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___12_INT_handle_c_faa0053c__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
