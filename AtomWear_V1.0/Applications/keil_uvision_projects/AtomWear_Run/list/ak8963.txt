; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\output\ak8963.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ak8963.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\Software\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Device\Nordic\nRF51822\Include -DNRF51 -DBOARD_PCA10001 -DNRF51_DBG --omf_browse=.\output\ak8963.crf ..\..\..\Software\Source\AK8963C\ak8963.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ak8963_write PROC
;;;20     
;;;21     void ak8963_write(uint8_t device_addr, uint8_t register_addr, uint8_t *register_data, uint8_t write_length)
000000  b5ff              PUSH     {r0-r7,lr}
;;;22     {
000002  b083              SUB      sp,sp,#0xc
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  461c              MOV      r4,r3
;;;23         uint8_t send_rec[10], i;
;;;24         if( (write_length > 9) || (write_length < 1) )
00000a  2c09              CMP      r4,#9
00000c  dc01              BGT      |L1.18|
00000e  2c01              CMP      r4,#1
000010  da04              BGE      |L1.28|
                  |L1.18|
;;;25         {
;;;26             xprintf("write length error.\r\n");
000012  a0a3              ADR      r0,|L1.672|
000014  f7fffffe          BL       xprintf
                  |L1.24|
;;;27             return;
;;;28         }
;;;29         else
;;;30         {
;;;31             device_addr = (device_addr << 1) & 0xFE;
;;;32             send_rec[0] = register_addr;
;;;33             
;;;34             for(i = 1; i <= write_length; i++)
;;;35             {
;;;36                 send_rec[i] = register_data[i-1];
;;;37             }
;;;38             
;;;39             twi_master_transfer(device_addr, send_rec, write_length + 1, TWI_ISSUE_STOP); 
;;;40         }
;;;41     }
000018  b007              ADD      sp,sp,#0x1c
00001a  bdf0              POP      {r4-r7,pc}
                  |L1.28|
00001c  0070              LSLS     r0,r6,#1              ;31
00001e  21fe              MOVS     r1,#0xfe              ;31
000020  4008              ANDS     r0,r0,r1              ;31
000022  4606              MOV      r6,r0                 ;31
000024  4668              MOV      r0,sp                 ;32
000026  7007              STRB     r7,[r0,#0]            ;32
000028  2501              MOVS     r5,#1                 ;34
00002a  e006              B        |L1.58|
                  |L1.44|
00002c  1e68              SUBS     r0,r5,#1              ;36
00002e  9905              LDR      r1,[sp,#0x14]         ;36
000030  5c08              LDRB     r0,[r1,r0]            ;36
000032  4669              MOV      r1,sp                 ;36
000034  5548              STRB     r0,[r1,r5]            ;36
000036  1c68              ADDS     r0,r5,#1              ;34
000038  b2c5              UXTB     r5,r0                 ;34
                  |L1.58|
00003a  42a5              CMP      r5,r4                 ;34
00003c  ddf6              BLE      |L1.44|
00003e  1c60              ADDS     r0,r4,#1              ;39
000040  b2c2              UXTB     r2,r0                 ;39
000042  2301              MOVS     r3,#1                 ;39
000044  4669              MOV      r1,sp                 ;39
000046  4630              MOV      r0,r6                 ;39
000048  f7fffffe          BL       twi_master_transfer
00004c  bf00              NOP      
00004e  e7e3              B        |L1.24|
;;;42     
                          ENDP

                  ak8963_read PROC
;;;43     uint8_t ak8963_read(uint8_t device_addr, uint8_t register_addr, uint8_t *register_data, uint8_t read_length)
000050  b57f              PUSH     {r0-r6,lr}
;;;44     {
000052  4604              MOV      r4,r0
000054  4616              MOV      r6,r2
000056  461d              MOV      r5,r3
;;;45         if(read_length < 1)
000058  2d01              CMP      r5,#1
00005a  da05              BGE      |L1.104|
;;;46         {
;;;47             xprintf("read length error.\r\n");
00005c  a096              ADR      r0,|L1.696|
00005e  f7fffffe          BL       xprintf
;;;48             return false;
000062  2000              MOVS     r0,#0
                  |L1.100|
;;;49         }
;;;50         else
;;;51         {
;;;52             device_addr = (device_addr << 1) & 0xFE;
;;;53             twi_master_transfer(device_addr, &register_addr, 1, TWI_DONT_ISSUE_STOP); // write
;;;54             
;;;55             device_addr = device_addr | 0x01;
;;;56             twi_master_transfer(device_addr, register_data, read_length, TWI_ISSUE_STOP); // read
;;;57             return true;
;;;58         }
;;;59     }
000064  b004              ADD      sp,sp,#0x10
000066  bd70              POP      {r4-r6,pc}
                  |L1.104|
000068  0060              LSLS     r0,r4,#1              ;52
00006a  21fe              MOVS     r1,#0xfe              ;52
00006c  4008              ANDS     r0,r0,r1              ;52
00006e  4604              MOV      r4,r0                 ;52
000070  2300              MOVS     r3,#0                 ;53
000072  2201              MOVS     r2,#1                 ;53
000074  a901              ADD      r1,sp,#4              ;53
000076  4620              MOV      r0,r4                 ;53
000078  f7fffffe          BL       twi_master_transfer
00007c  2001              MOVS     r0,#1                 ;55
00007e  4304              ORRS     r4,r4,r0              ;55
000080  2301              MOVS     r3,#1                 ;56
000082  462a              MOV      r2,r5                 ;56
000084  4631              MOV      r1,r6                 ;56
000086  4620              MOV      r0,r4                 ;56
000088  f7fffffe          BL       twi_master_transfer
00008c  2001              MOVS     r0,#1                 ;57
00008e  e7e9              B        |L1.100|
;;;60     
                          ENDP

                  ak8963_Read PROC
;;;61     uint8_t ak8963_Read(uint8_t device_addr, uint8_t register_addr)
000090  b513              PUSH     {r0,r1,r4,lr}
;;;62     {
000092  b082              SUB      sp,sp,#8
000094  4604              MOV      r4,r0
;;;63     	uint8_t temp;
;;;64     	
;;;65     	device_addr = (device_addr << 1) & 0xFE;
000096  0060              LSLS     r0,r4,#1
000098  21fe              MOVS     r1,#0xfe
00009a  4008              ANDS     r0,r0,r1
00009c  4604              MOV      r4,r0
;;;66     	twi_master_transfer(device_addr, &register_addr, 1, TWI_DONT_ISSUE_STOP); // write
00009e  2300              MOVS     r3,#0
0000a0  2201              MOVS     r2,#1
0000a2  a903              ADD      r1,sp,#0xc
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       twi_master_transfer
;;;67     	
;;;68     	device_addr = device_addr | 0x01;
0000aa  2001              MOVS     r0,#1
0000ac  4304              ORRS     r4,r4,r0
;;;69         twi_master_transfer(device_addr, &temp, 1, TWI_ISSUE_STOP); // read
0000ae  2301              MOVS     r3,#1
0000b0  461a              MOV      r2,r3
0000b2  a901              ADD      r1,sp,#4
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       twi_master_transfer
;;;70     	
;;;71     	return temp;
0000ba  4668              MOV      r0,sp
0000bc  7900              LDRB     r0,[r0,#4]
;;;72     }
0000be  b004              ADD      sp,sp,#0x10
0000c0  bd10              POP      {r4,pc}
;;;73     
                          ENDP

                  number_convert PROC
;;;74     int16_t number_convert(uint8_t lsb, uint8_t msb, uint8_t bit)
0000c2  b530              PUSH     {r4,r5,lr}
;;;75     {
0000c4  4604              MOV      r4,r0
0000c6  460b              MOV      r3,r1
;;;76     	int16_t value;
;;;77     	
;;;78     	if(bit == 14)
0000c8  2a0e              CMP      r2,#0xe
0000ca  d116              BNE      |L1.250|
;;;79     	{
;;;80     		value = msb;
0000cc  4619              MOV      r1,r3
;;;81     		value <<= 8;
0000ce  0208              LSLS     r0,r1,#8
0000d0  b201              SXTH     r1,r0
;;;82     		value += lsb;
0000d2  1908              ADDS     r0,r1,r4
0000d4  b201              SXTH     r1,r0
;;;83     		
;;;84     		if(value & 0x2000)
0000d6  2001              MOVS     r0,#1
0000d8  0340              LSLS     r0,r0,#13
0000da  4201              TST      r1,r0
0000dc  d00b              BEQ      |L1.246|
;;;85     		{
;;;86     			value = ~value;
0000de  43c9              MVNS     r1,r1
;;;87     			value &= ~0xc000;    
0000e0  2503              MOVS     r5,#3
0000e2  03ad              LSLS     r5,r5,#14
0000e4  4608              MOV      r0,r1
0000e6  43a8              BICS     r0,r0,r5
0000e8  b201              SXTH     r1,r0
;;;88     			value++;
0000ea  1c48              ADDS     r0,r1,#1
0000ec  b201              SXTH     r1,r0
;;;89     			value = -value;
0000ee  4248              RSBS     r0,r1,#0
0000f0  b201              SXTH     r1,r0
;;;90     			return value;	   
0000f2  4608              MOV      r0,r1
                  |L1.244|
;;;91     		}
;;;92     		else
;;;93     		{
;;;94     			return value;
;;;95     		}
;;;96     	}	
;;;97     	else if(bit == 16)
;;;98     	{
;;;99     		value = msb;
;;;100    		value <<= 8;
;;;101    		value += lsb;
;;;102    		
;;;103    		if(value & 0x8000)
;;;104    		{
;;;105    			value = ~value;
;;;106    			value++;
;;;107    			value = -value;
;;;108    			return value;	  
;;;109    		}
;;;110    		else
;;;111    		{
;;;112    			return value;
;;;113    		}
;;;114    	}
;;;115    }
0000f4  bd30              POP      {r4,r5,pc}
                  |L1.246|
0000f6  4608              MOV      r0,r1                 ;94
0000f8  e7fc              B        |L1.244|
                  |L1.250|
0000fa  2a10              CMP      r2,#0x10              ;97
0000fc  d110              BNE      |L1.288|
0000fe  4619              MOV      r1,r3                 ;99
000100  0208              LSLS     r0,r1,#8              ;100
000102  b201              SXTH     r1,r0                 ;100
000104  1908              ADDS     r0,r1,r4              ;101
000106  b201              SXTH     r1,r0                 ;101
000108  02d0              LSLS     r0,r2,#11             ;103
00010a  4201              TST      r1,r0                 ;103
00010c  d006              BEQ      |L1.284|
00010e  43c9              MVNS     r1,r1                 ;105
000110  1c48              ADDS     r0,r1,#1              ;106
000112  b201              SXTH     r1,r0                 ;106
000114  4248              RSBS     r0,r1,#0              ;107
000116  b201              SXTH     r1,r0                 ;107
000118  4608              MOV      r0,r1                 ;108
00011a  e7eb              B        |L1.244|
                  |L1.284|
00011c  4608              MOV      r0,r1                 ;112
00011e  e7e9              B        |L1.244|
                  |L1.288|
000120  bf00              NOP      
000122  e7e7              B        |L1.244|
;;;116    
                          ENDP

                  ak8963_init PROC
;;;117    void ak8963_init(void)
000124  b508              PUSH     {r3,lr}
;;;118    {
;;;119        uint8_t buffer[2];
;;;120    	
;;;121        ak8963_read(AK8963_ADDR, AK8963_WIA, buffer, 1);
000126  2301              MOVS     r3,#1
000128  466a              MOV      r2,sp
00012a  2100              MOVS     r1,#0
00012c  200c              MOVS     r0,#0xc
00012e  f7fffffe          BL       ak8963_read
;;;122        if(buffer[0] != 0x48)
000132  4668              MOV      r0,sp
000134  7800              LDRB     r0,[r0,#0]
000136  2848              CMP      r0,#0x48
000138  d005              BEQ      |L1.326|
;;;123        {
;;;124            xprintf("AK8963_WIA address error:%X\r\n", buffer[0]);
00013a  4668              MOV      r0,sp
00013c  7801              LDRB     r1,[r0,#0]
00013e  a064              ADR      r0,|L1.720|
000140  f7fffffe          BL       xprintf
                  |L1.324|
;;;125            return;
;;;126        }
;;;127    	else
;;;128    		xprintf("AK8963_WIA read successful!\r\n");
;;;129        
;;;130    	buffer[0] = 0x10;
;;;131        ak8963_write(AK8963_ADDR, AK8963_CNTL1, &buffer[0], 1);//AK8963_CNTL1 = 0x10;			//16bit / power down mode
;;;132    	    
;;;133        nrf_delay_ms(67);   
;;;134    }
000144  bd08              POP      {r3,pc}
                  |L1.326|
000146  a06a              ADR      r0,|L1.752|
000148  f7fffffe          BL       xprintf
00014c  2010              MOVS     r0,#0x10              ;130
00014e  4669              MOV      r1,sp                 ;130
000150  7008              STRB     r0,[r1,#0]            ;130
000152  2301              MOVS     r3,#1                 ;131
000154  466a              MOV      r2,sp                 ;131
000156  210a              MOVS     r1,#0xa               ;131
000158  200c              MOVS     r0,#0xc               ;131
00015a  f7fffffe          BL       ak8963_write
00015e  2043              MOVS     r0,#0x43              ;133
000160  f7fffffe          BL       nrf_delay_ms
000164  bf00              NOP      
000166  e7ed              B        |L1.324|
;;;135    
                          ENDP

                  self_test PROC
;;;136    void self_test(void)
000168  b5fe              PUSH     {r1-r7,lr}
;;;137    {
;;;138    	uint8_t temp;
;;;139    	uint8_t value[6];
;;;140    	int16_t x_value, y_value, z_value;
;;;141    	
;;;142    	ak8963_init();
00016a  f7fffffe          BL       ak8963_init
;;;143    	
;;;144    	temp = 0x40;
00016e  2140              MOVS     r1,#0x40
000170  9102              STR      r1,[sp,#8]
;;;145    	ak8963_write(AK8963_ADDR, AK8963_ASTC, &temp, 1);//AK8963_ASTC = 0x40;				//self test
000172  2301              MOVS     r3,#1
000174  aa02              ADD      r2,sp,#8
000176  210c              MOVS     r1,#0xc
000178  4608              MOV      r0,r1
00017a  f7fffffe          BL       ak8963_write
;;;146    	
;;;147    	temp = 0x18;
00017e  2118              MOVS     r1,#0x18
000180  9102              STR      r1,[sp,#8]
;;;148    	ak8963_write(AK8963_ADDR, AK8963_CNTL1, &temp, 1);//AK8963_CNTL1 = 0x18;		//self-test mode;
000182  2301              MOVS     r3,#1
000184  aa02              ADD      r2,sp,#8
000186  210a              MOVS     r1,#0xa
000188  200c              MOVS     r0,#0xc
00018a  f7fffffe          BL       ak8963_write
;;;149    	
;;;150    	nrf_delay_ms(10);
00018e  200a              MOVS     r0,#0xa
000190  f7fffffe          BL       nrf_delay_ms
;;;151    	while(!(ak8963_Read(AK8963_ADDR, AK8963_ST1) & 0x01));
000194  bf00              NOP      
                  |L1.406|
000196  2102              MOVS     r1,#2
000198  200c              MOVS     r0,#0xc
00019a  f7fffffe          BL       ak8963_Read
00019e  07c0              LSLS     r0,r0,#31
0001a0  0fc0              LSRS     r0,r0,#31
0001a2  d0f8              BEQ      |L1.406|
;;;152    	
;;;153    	ak8963_read(AK8963_ADDR, AK8963_HXL, value, 6);
0001a4  2306              MOVS     r3,#6
0001a6  466a              MOV      r2,sp
0001a8  2103              MOVS     r1,#3
0001aa  200c              MOVS     r0,#0xc
0001ac  f7fffffe          BL       ak8963_read
;;;154    	
;;;155    	temp = 0x00;
0001b0  2000              MOVS     r0,#0
0001b2  9002              STR      r0,[sp,#8]
;;;156    	ak8963_write(AK8963_ADDR, AK8963_ASTC, &temp, 1);//AK8963_ASTC = 0x00;				//close self test mode
0001b4  2301              MOVS     r3,#1
0001b6  aa02              ADD      r2,sp,#8
0001b8  210c              MOVS     r1,#0xc
0001ba  4608              MOV      r0,r1
0001bc  f7fffffe          BL       ak8963_write
;;;157    	
;;;158    	temp = 0x10;
0001c0  2010              MOVS     r0,#0x10
0001c2  9002              STR      r0,[sp,#8]
;;;159    	ak8963_write(AK8963_ADDR, AK8963_CNTL1, &temp, 1);//AK8963_CNTL1 = 0x10;		//power down;	
0001c4  2301              MOVS     r3,#1
0001c6  aa02              ADD      r2,sp,#8
0001c8  210a              MOVS     r1,#0xa
0001ca  200c              MOVS     r0,#0xc
0001cc  f7fffffe          BL       ak8963_write
;;;160    	
;;;161    	x_value = number_convert(value[0], value[1], 16);
0001d0  466a              MOV      r2,sp
0001d2  7851              LDRB     r1,[r2,#1]
0001d4  7810              LDRB     r0,[r2,#0]
0001d6  2210              MOVS     r2,#0x10
0001d8  f7fffffe          BL       number_convert
0001dc  4604              MOV      r4,r0
;;;162    	y_value = number_convert(value[2], value[3], 16);
0001de  466a              MOV      r2,sp
0001e0  78d1              LDRB     r1,[r2,#3]
0001e2  7890              LDRB     r0,[r2,#2]
0001e4  2210              MOVS     r2,#0x10
0001e6  f7fffffe          BL       number_convert
0001ea  4605              MOV      r5,r0
;;;163    	z_value = number_convert(value[4], value[5], 16);
0001ec  466a              MOV      r2,sp
0001ee  7951              LDRB     r1,[r2,#5]
0001f0  7910              LDRB     r0,[r2,#4]
0001f2  2210              MOVS     r2,#0x10
0001f4  f7fffffe          BL       number_convert
0001f8  4606              MOV      r6,r0
;;;164    	
;;;165    	xprintf("%d,%d,%d\r\n", x_value, y_value, z_value);
0001fa  4633              MOV      r3,r6
0001fc  462a              MOV      r2,r5
0001fe  4621              MOV      r1,r4
000200  a043              ADR      r0,|L1.784|
000202  f7fffffe          BL       xprintf
;;;166    	
;;;167    }
000206  bdfe              POP      {r1-r7,pc}
;;;168    
                          ENDP

                  ak8963_test PROC
;;;169    void ak8963_test(void)
000208  b50e              PUSH     {r1-r3,lr}
;;;170    {
;;;171    	uint8_t temp;
;;;172    	uint8_t value[6];
;;;173    	int16_t x_value, y_value, z_value;
;;;174    	
;;;175    	self_test();
00020a  f7fffffe          BL       self_test
;;;176    	
;;;177    	temp = 0x12;
00020e  2012              MOVS     r0,#0x12
000210  9002              STR      r0,[sp,#8]
;;;178    	ak8963_write(AK8963_ADDR, AK8963_CNTL1, &temp, 1);//AK8963_CNTL1 = 0x12; Continuous measurement mode 1; 8hz
000212  2301              MOVS     r3,#1
000214  aa02              ADD      r2,sp,#8
000216  210a              MOVS     r1,#0xa
000218  200c              MOVS     r0,#0xc
00021a  f7fffffe          BL       ak8963_write
;;;179    	
;;;180    	nrf_delay_ms(10);
00021e  200a              MOVS     r0,#0xa
000220  f7fffffe          BL       nrf_delay_ms
;;;181    	while(1)
000224  e03a              B        |L1.668|
                  |L1.550|
;;;182    	{
;;;183    		do
000226  bf00              NOP      
                  |L1.552|
;;;184    		{
;;;185    			ak8963_read(AK8963_ADDR, AK8963_ST1, &temp, 1);
000228  2301              MOVS     r3,#1
00022a  aa02              ADD      r2,sp,#8
00022c  2102              MOVS     r1,#2
00022e  200c              MOVS     r0,#0xc
000230  f7fffffe          BL       ak8963_read
;;;186    		}while(!(temp & 0x01));
000234  4668              MOV      r0,sp
000236  7a00              LDRB     r0,[r0,#8]
000238  07c0              LSLS     r0,r0,#31
00023a  0fc0              LSRS     r0,r0,#31
00023c  d0f4              BEQ      |L1.552|
;;;187    		
;;;188    		ak8963_read(AK8963_ADDR, AK8963_HXL, value, 6);
00023e  2306              MOVS     r3,#6
000240  466a              MOV      r2,sp
000242  2103              MOVS     r1,#3
000244  200c              MOVS     r0,#0xc
000246  f7fffffe          BL       ak8963_read
;;;189    		
;;;190    		ak8963_read(AK8963_ADDR, AK8963_ST2, &temp, 1);
00024a  2301              MOVS     r3,#1
00024c  aa02              ADD      r2,sp,#8
00024e  2109              MOVS     r1,#9
000250  200c              MOVS     r0,#0xc
000252  f7fffffe          BL       ak8963_read
;;;191    		
;;;192    		if(!(temp & 0x08))
000256  4668              MOV      r0,sp
000258  7a00              LDRB     r0,[r0,#8]
00025a  2108              MOVS     r1,#8
00025c  4208              TST      r0,r1
00025e  d114              BNE      |L1.650|
;;;193    		{
;;;194    			x_value = number_convert(value[0], value[1], 16);
000260  466a              MOV      r2,sp
000262  7851              LDRB     r1,[r2,#1]
000264  7810              LDRB     r0,[r2,#0]
000266  2210              MOVS     r2,#0x10
000268  f7fffffe          BL       number_convert
00026c  4605              MOV      r5,r0
;;;195    			y_value = number_convert(value[2], value[3], 16);
00026e  466a              MOV      r2,sp
000270  78d1              LDRB     r1,[r2,#3]
000272  7890              LDRB     r0,[r2,#2]
000274  2210              MOVS     r2,#0x10
000276  f7fffffe          BL       number_convert
00027a  4606              MOV      r6,r0
;;;196    			z_value = number_convert(value[4], value[5], 16);
00027c  466a              MOV      r2,sp
00027e  7951              LDRB     r1,[r2,#5]
000280  7910              LDRB     r0,[r2,#4]
000282  2210              MOVS     r2,#0x10
000284  f7fffffe          BL       number_convert
000288  4604              MOV      r4,r0
                  |L1.650|
;;;197    		}
;;;198    		
;;;199    		xprintf("%d,%d,%d\r\n", x_value, y_value, z_value);
00028a  4623              MOV      r3,r4
00028c  4632              MOV      r2,r6
00028e  4629              MOV      r1,r5
000290  a01f              ADR      r0,|L1.784|
000292  f7fffffe          BL       xprintf
;;;200    		
;;;201    		nrf_delay_ms(10);
000296  200a              MOVS     r0,#0xa
000298  f7fffffe          BL       nrf_delay_ms
                  |L1.668|
00029c  e7c3              B        |L1.550|
;;;202    	}
;;;203    }
;;;204    
                          ENDP

00029e  0000              DCW      0x0000
                  |L1.672|
0002a0  77726974          DCB      "write length error.\r\n",0
0002a4  65206c65
0002a8  6e677468
0002ac  20657272
0002b0  6f722e0d
0002b4  0a00    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L1.696|
0002b8  72656164          DCB      "read length error.\r\n",0
0002bc  206c656e
0002c0  67746820
0002c4  6572726f
0002c8  722e0d0a
0002cc  00      
0002cd  00                DCB      0
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L1.720|
0002d0  414b3839          DCB      "AK8963_WIA address error:%X\r\n",0
0002d4  36335f57
0002d8  49412061
0002dc  64647265
0002e0  73732065
0002e4  72726f72
0002e8  3a25580d
0002ec  0a00    
0002ee  00                DCB      0
0002ef  00                DCB      0
                  |L1.752|
0002f0  414b3839          DCB      "AK8963_WIA read successful!\r\n",0
0002f4  36335f57
0002f8  49412072
0002fc  65616420
000300  73756363
000304  65737366
000308  756c210d
00030c  0a00    
00030e  00                DCB      0
00030f  00                DCB      0
                  |L1.784|
000310  25642c25          DCB      "%d,%d,%d\r\n",0
000314  642c2564
000318  0d0a00  
00031b  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Software\\Source\\AK8963C\\ak8963.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_ak8963_c_ded99164____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_ak8963_c_ded99164____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_ak8963_c_ded99164____REVSH|
#line 130
|__asm___8_ak8963_c_ded99164____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_ak8963_c_ded99164__nrf_delay_us|
#line 8 "..\\..\\..\\Software\\Include\\nrf_delay.h"
|__asm___8_ak8963_c_ded99164__nrf_delay_us| PROC
#line 9

loop
 SUBS R0, R0, #1
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 NOP
 BNE loop
 BX LR
	ENDP

;*** End   embedded assembler ***
